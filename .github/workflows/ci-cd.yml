name: Deploy Website

on:
  push:
    branches:
      - main   # Trigger the workflow when you push to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DEPLOY_HOST: ec2-13-222-184-143.compute-1.amazonaws.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v3


    - name: Add server SSH key to known_hosts
      run: |
        mkdir -p ~/.ssh
        # use DEPLOY_HOST so hostnames stay in sync
        ssh-keyscan "$DEPLOY_HOST" >> ~/.ssh/known_hosts

    - name: Start ssh-agent and add private key
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Upload .env to server (if - present)
      run: |
        if [ -f .env ]; then
          echo "Found .env in repo — copying to server"
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null .env ubuntu@${DEPLOY_HOST}:/home/ubuntu/.env
        else
          echo ".env not found in repo — skipping .env upload. If you want me to generate .env on the server from secrets, tell me and I'll add that step."
        fi

    - name: Copy files and deploy to server
      run: |
        # Verify local files exist before copying
        echo "Checking local files..."
        ls -la ./nginx/
        ls -la ./nginx/templates/
        ls -la ./docker-compose.yml
        
        # Create directories and copy files in a single SSH session to avoid timing issues
        ssh -o StrictHostKeyChecking=no ubuntu@${DEPLOY_HOST} << 'EOF'
          echo "Creating directory structure..."
          mkdir -p /home/ubuntu/nginx
          mkdir -p /home/ubuntu/nginx/templates
          chmod 755 /home/ubuntu/nginx
          chmod 755 /home/ubuntu/nginx/templates
          
          echo "Verifying directories exist..."
          ls -la /home/ubuntu/
          ls -la /home/ubuntu/nginx/
        EOF
        
        # Copy the necessary deployment files to the server.
        echo "Copying nginx/Dockerfile..."
        scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ./nginx/Dockerfile ubuntu@${DEPLOY_HOST}:/home/ubuntu/nginx/Dockerfile
        
        echo "Copying nginx/templates/nginx.conf..."
        scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ./nginx/templates/nginx.conf ubuntu@${DEPLOY_HOST}:/home/ubuntu/nginx/templates/nginx.conf
        
        echo "Copying docker-compose.yml..."
        scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ./docker-compose.yml ubuntu@${DEPLOY_HOST}:/home/ubuntu/docker-compose.yml
        
        # Verify files were copied successfully
        ssh -o StrictHostKeyChecking=no ubuntu@${DEPLOY_HOST} << 'EOF'
          echo "Verifying copied files..."
          ls -la /home/ubuntu/
          ls -la /home/ubuntu/nginx/
          ls -la /home/ubuntu/nginx/templates/
        EOF


    - name: Deploy on server (overwrite sites-available and set default)
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${DEPLOY_HOST} << 'EOF'
          set -e

          # Ensure docker-compose is present and pull configured images, then bring services up
          # Ensure Docker Engine is installed and running (required by docker-compose)
          if ! command -v docker >/dev/null 2>&1; then
            echo "Docker not found, installing docker.io..."
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl enable --now docker
          else
            echo "Docker already installed"
            sudo systemctl enable --now docker || true
          fi

          # Ensure docker-compose is present (compose V1 binary); if not, install it
          if ! command -v docker-compose >/dev/null 2>&1; then
            echo "docker-compose not found, attempting to install..."
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          docker --version
          docker-compose prune -f || true

          # Stop local system nginx (if present) so Docker can bind port 80. If you want to keep system nginx,
          # change NGINX_PORT in your .env to a non-privileged port (e.g., 8080).
          sudo systemctl stop nginx || true
         

          # Gracefully stop any previous compose stack in this directory to free ports
          sudo docker-compose down --remove-orphans || true

          # Pull images specified in docker-compose and restart services (use sudo to ensure access to docker socket)
          sudo docker-compose pull || true
          sudo docker-compose build nginx
          sudo docker-compose up -d --remove-orphans

          echo "Deployment and configuration completed successfully!"
        EOF