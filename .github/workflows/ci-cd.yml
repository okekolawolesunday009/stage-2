name: Deploy Website

on:
  push:
    branches:
      - main   # Trigger the workflow when you push to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3


    - name: Add server SSH key to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan ec2-98-91-16-9.compute-1.amazonaws.com >> ~/.ssh/known_hosts

    - name: Start ssh-agent and add private key
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Copy files and deploy to server
      run: |
        # Copy the necessary deployment files to the server
        scp ./nginx/templates/nginx.conf ubuntu@ec2-98-91-16-9.compute-1.amazonaws.com:/home/ubuntu/nginx.conf
        scp ./docker-compose.yml ubuntu@ec2-98-91-16-9.compute-1.amazonaws.com:/home/ubuntu/docker-compose.yml


    - name: Deploy on server (overwrite sites-available and set default)
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@ec2-98-91-16-9.compute-1.amazonaws.com << 'EOF'
          set -e

          # Optional: ensure nginx is installed (uncomment if you want automatic install)
          if ! command -v nginx >/dev/null 2>&1; then
            echo "Nginx not found, installing..."
            sudo apt-get update
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y nginx
          fi

          # Ensure docker-compose is present and pull configured images, then bring services up
          if ! command -v docker-compose >/dev/null 2>&1; then
            echo "docker-compose not found, attempting to install..."
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

        

        
          # Pull images specified in docker-compose and restart services
          sudo docker-compose pull || true
          sudo docker-compose up -d --remove-orphans

          echo "Deployment and configuration completed successfully!"
        EOF
